divert(-1)
define(NEWPROC,) dnl

define(TRACE_ON, `newphase(1)')
define(TRACE_OFF, `endphase(1)')


define(GSDEC, `int ($1);')
define(GSINIT, `{ ($1) = 0; }')
define(GETSUB, `{ 
  if (($1)<=($3)) 
    ($2) = ($1)++; 
  else { 
    ($2) = -1; 
    ($1) = 0; 
  }
}')

define(NU_GSDEC, `int ($1);')
define(NU_GSINIT, `{ ($1) = 0; }')
define(NU_GETSUB, `GETSUB($1,$2,$3,$4)')

define(ADEC, `int ($1);')
define(AINIT, `{;}')
define(PROBEND, `{;}')

# NOTE: LOCK and PAUSE (flag) should only be declared within a structure
#       that is to be allocated using shmalloc (G_MALLOC), as other
#       accesses are considered private. BARRIERs are always allocated with
#	shmalloc

define(LOCKDEC, `volatile int ($1);') 
define(LOCKINIT, `{FREELOCK(&$1);}')
define(LOCK, `{GETLOCK(&$1);}')
define(UNLOCK, `{FREELOCK(&$1);}')

define(NLOCKDEC, `volatile int ($1);')
define(NLOCKINIT, `{FREELOCK(&$1);}')
define(NLOCK, `{GETLOCK(&$1);}')
define(NUNLOCK, `{FREELOCK(&$1);;}')

define(ALOCKDEC, `volatile int $1[$2];')
define(ALOCKINIT,
`{
  int tempk;
  for(tempk=0;tempk<$2;tempk++)
     FREELOCK(&($1[tempk]));
}')
define(ALOCK, `{GETLOCK(&($1[$2]));}')
define(AULOCK, `{FREELOCK(&($1[$2]));;}')

define(PAUSEDEC, `volatile int $1;')
define(PAUSEINIT, `{WRITEFLAG(&($1),0);}')
define(CLEARPAUSE, `{WRITEFLAG(&($1),0);}')
define(SETPAUSE, `{WRITEFLAG(&($1),1);}')

define(EVENT, `{;}')
define(WAITPAUSE, `{WAITFLAG(&($1),1);}')
define(PAUSE, `{ACQ_MEMBAR}')

define(BARRIER, `{TREEBAR(&($1), MyNum);}')
define(BARDEC, `TreeBar $1;')
define(BARINIT, `{TreeBarInit(&($1), NUMBER_OF_PROCESSORS);}')


define(WAIT_FOR_END, `{TREEBAR(&final_sync, getpid());}')

define(CREATE, `{ if(fork() == 0) {($1)(); TREEBAR(&final_sync, getpid()); exit(0);}}')
define(MAIN_INITENV, `{BARINIT(final_sync);}')
define(MAIN_END, `{exit(0);}')
define(MAIN_ENV,`#include <rsim_apps.h>
BARDEC(final_sync)')

define(ENV, `{;} ')
define(EXTERN_ENV, `#include <rsim_apps.h>')

define(GET_PID, `{($1) = getpid();;}')
define(CLOCK, `{long time(long *); ($1) = time(0); }/* if you want clock cycles, you should call sysclocks instead of time (which gives seconds) */')

# There currently is no freeing of globally allocated memory
# Any programs that want to do such a thing will need to provide
# their own suballocator -- if your program needs this, send
# mail on the RSIM discussion list and we can point you to the
# resources you need.
define(G_MALLOC, `shmalloc($1);')
define(G_FREE, ` ')
define(G_MALLOC_F, `shmalloc($1)')
define(NU_MALLOC, `shmalloc($1);')
define(NU_FREE, ` ')
define(NU_MALLOC_F, `shmalloc($1)')

# Unsupported macros

define(AUG_ON, ` ')
define(AUG_OFF, ` ')
define(REF_TRACE_ON, ` ')
define(REF_TRACE_OFF, ` ')
define(DYN_TRACE_ON, `;')
define(DYN_TRACE_OFF, `;')
define(DYN_REF_TRACE_ON, `;')
define(DYN_REF_TRACE_OFF, `;')
define(DYN_SIM_ON, `;')
define(DYN_SIM_OFF, `;')
define(DYN_SCHED_ON, `;')
define(DYN_SCHED_OFF, `;')
define(AUG_SET_LOLIMIT, `;')
define(AUG_SET_HILIMIT, `;')
define(AUG_DELAY, ` ')

define(MENTER, `{;}')
define(DELAY, `{;}')
define(CONTINUE, `{;}')
define(MEXIT, `{;}')
define(MONINIT, `{;}')

define(ST_LOG, `{;}')
define(SET_HOME, `{;}')
define(GET_HOME, `{($1) = 0;}')
divert(0)

